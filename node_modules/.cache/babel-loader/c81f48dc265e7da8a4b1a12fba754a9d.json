{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/containers/ContractorProfileContainer.js\";\nimport React from \"react\";\nimport { Button, Header, Icon, Modal } from \"semantic-ui-react\"; // import store from '../redux/store'\n\nimport ContractorProfile from \"../components/ContractorProfile\";\nimport ContractorTaskShowPage from \"../components/ContractorTaskShowPage\";\nimport { // eslint-disable-next-line\nBrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nconst TASKS = \"http://localhost:3000/tasks/\";\nexport default class ContractorProfileContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      anyBidsSelected: false,\n      sortedBid: [],\n      currentTask: [],\n      showTaskPage: true,\n      loading: true\n    };\n\n    this.updateCurrentTask = (event, contractor, task) => {\n      debugger;\n      console.log(\"click\");\n    };\n\n    this.componentDidMount = () => {\n      if (this.props.location.pathname !== \"/contractor\") {\n        fetch(TASKS + this.props.location.pathname.split(\"/\").pop()).then(res => res.json()).then(task => {\n          if (!task.error) {\n            let sortedBids = this.sortBids(task.bids);\n            this.setState({\n              currentTask: task,\n              sortedBid: sortedBids\n            });\n            task.bids.forEach(bid => {\n              if (bid.status) {\n                this.setState({\n                  anyBidsSelected: true\n                });\n              }\n            });\n          } else {\n            this.setState({\n              showTaskPage: false,\n              loading: false\n            });\n          }\n        });\n      }\n    };\n\n    this.sortBids = bids => {\n      let sorted = bids.sort((a, b) => a.price > b.price ? 1 : -1);\n      return sorted[0];\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.state.showTaskPage ? React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(this.props.match.url, \"/task/:id\"),\n      render: routerProps => {\n        // let taskObj = this.props.contractor.bids.find(\n        //   bid => bid.task.id == props.match.params.id\n        // )\n        return React.createElement(ContractorTaskShowPage, {\n          id: routerProps.match.params.id,\n          contractor: this.props.contractor,\n          makeABid: this.props.makeABid,\n          contractorDeleteBid: this.props.contractorDeleteBid,\n          routerProps: routerProps,\n          anyBidsSelected: this.state.anyBidsSelected,\n          sortedBid: this.state.sortedBid,\n          currentTask: this.state.currentTask,\n          updateCurrentTask: this.updateCurrentTask,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/opentasks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"\".concat(this.props.match.url),\n      render: routerProps => {\n        return React.createElement(ContractorProfile, {\n          contractor: this.props.contractor,\n          routerProps: routerProps,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/containers/ContractorProfileContainer.js"],"names":["React","Button","Header","Icon","Modal","ContractorProfile","ContractorTaskShowPage","BrowserRouter","Router","Route","Switch","Redirect","TASKS","ContractorProfileContainer","Component","state","anyBidsSelected","sortedBid","currentTask","showTaskPage","loading","updateCurrentTask","event","contractor","task","console","log","componentDidMount","props","location","pathname","fetch","split","pop","then","res","json","error","sortedBids","sortBids","bids","setState","forEach","bid","status","sorted","sort","a","b","price","render","match","url","routerProps","params","id","makeABid","contractorDeleteBid"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Header, Icon, Modal } from \"semantic-ui-react\";\n// import store from '../redux/store'\nimport ContractorProfile from \"../components/ContractorProfile\";\nimport ContractorTaskShowPage from \"../components/ContractorTaskShowPage\";\nimport {\n  // eslint-disable-next-line\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\nconst TASKS = \"http://localhost:3000/tasks/\";\n\nexport default class ContractorProfileContainer extends React.Component {\n  state = {\n    anyBidsSelected: false,\n    sortedBid: [],\n    currentTask: [],\n    showTaskPage: true,\n    loading: true\n  };\n\n  updateCurrentTask = (event, contractor, task) => {\n    debugger;\n    console.log(\"click\");\n  };\n\n  componentDidMount = () => {\n    if (this.props.location.pathname !== \"/contractor\") {\n      fetch(TASKS + this.props.location.pathname.split(\"/\").pop())\n        .then(res => res.json())\n        .then(task => {\n          if (!task.error) {\n            let sortedBids = this.sortBids(task.bids);\n            this.setState({\n              currentTask: task,\n              sortedBid: sortedBids\n            });\n            task.bids.forEach(bid => {\n              if (bid.status) {\n                this.setState({\n                  anyBidsSelected: true\n                });\n              }\n            });\n          } else {\n            this.setState({\n              showTaskPage: false,\n              loading: false\n            });\n          }\n        });\n    }\n  };\n\n  sortBids = bids => {\n    let sorted = bids.sort((a, b) => (a.price > b.price ? 1 : -1));\n\n    return sorted[0];\n  };\n\n  render() {\n    return (\n      <div>\n        <Switch>\n          {this.state.showTaskPage ? (\n            <Route\n              exact\n              path={`${this.props.match.url}/task/:id`}\n              render={routerProps => {\n                // let taskObj = this.props.contractor.bids.find(\n                //   bid => bid.task.id == props.match.params.id\n                // )\n\n                return (\n                  <ContractorTaskShowPage\n                    id={routerProps.match.params.id}\n                    contractor={this.props.contractor}\n                    makeABid={this.props.makeABid}\n                    contractorDeleteBid={this.props.contractorDeleteBid}\n                    routerProps={routerProps}\n                    anyBidsSelected={this.state.anyBidsSelected}\n                    sortedBid={this.state.sortedBid}\n                    currentTask={this.state.currentTask}\n                    updateCurrentTask={this.updateCurrentTask}\n                  />\n                );\n              }}\n            />\n          ) : (\n            <Redirect to=\"/opentasks\" />\n          )}\n\n          <Route\n            path={`${this.props.match.url}`}\n            render={routerProps => {\n              return (\n                <ContractorProfile\n                  contractor={this.props.contractor}\n                  routerProps={routerProps}\n                />\n              );\n            }}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}