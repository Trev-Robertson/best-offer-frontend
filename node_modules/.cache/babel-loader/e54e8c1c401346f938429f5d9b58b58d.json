{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/containers/ContractorsContainer.js\";\nimport React from \"react\";\nimport ContractorShowPage from \"../components/ContractorShowPage\";\nimport { Card } from \"semantic-ui-react\";\nimport { isEmpty } from \"lodash\";\nimport { // eslint-disable-next-line\nBrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nconst URL = 'http://localhost:3000/contractors';\nconst REVIEWSURL = 'http://localhost:3000/reviews';\nexport default class ContractorsContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allContractors: [],\n      profileSelected: [],\n      newReview: true\n    };\n\n    this.extra = contractor => {\n      return this.state.allContractors ? React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"My Specialties Are \".concat(contractor.specialties[0].name[0].toUpperCase() + contractor.specialties[0].name.slice(1), \" \\n       and \").concat(contractor.specialties[1].name[0].toUpperCase() + contractor.specialties[1].name.slice(1))) : null;\n    };\n\n    this.addNewReview = (event, rating, contractor) => {\n      event.preventDefault();\n      let data = {\n        user_id: this.props.user.id,\n        contractor_id: contractor.id,\n        stars: rating,\n        content: event.target.content.value\n      };\n      fetch(REVIEWSURL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      }).then(res => res.json()).then(res => {\n        console.log(res); // let updateContractor = this.state.allContractors.map( contractor => contractor.id === res.id ? res.id : contractor) \n\n        this.setState({\n          allContractors: res\n        });\n      });\n    };\n\n    this.CardExampleLinkCard = contractor => React.createElement(Card, {\n      key: contractor.id,\n      image: \"https://thispersondoesnotexist.com/image\",\n      color: \"blue\",\n      href: \"/contractors/\".concat(contractor.id),\n      header: contractor.name,\n      meta: '',\n      description: \"Pick me if you want the job done right!\",\n      extra: this.extra(contractor),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    });\n  }\n\n  componentDidMount() {\n    fetch(URL).then(res => res.json()).then(allContractors => {\n      this.setState({\n        allContractors\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(this.props.match.url, \"/:id\"),\n      render: props => {\n        let contractorObj = this.state.allContractors.find(task => task.id == props.match.params.id);\n        return !isEmpty(contractorObj) ? React.createElement(ContractorShowPage, {\n          contractor: contractorObj,\n          addNewReview: this.addNewReview,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }) : null;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(this.props.match.url),\n      render: () => React.createElement(\"div\", {\n        className: \"contractor-display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Card.Group, {\n        itemsPerRow: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.state.allContractors.map(contractor => {\n        return this.CardExampleLinkCard(contractor);\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/containers/ContractorsContainer.js"],"names":["React","ContractorShowPage","Card","isEmpty","BrowserRouter","Router","Route","Switch","Redirect","URL","REVIEWSURL","ContractorsContainer","Component","state","allContractors","profileSelected","newReview","extra","contractor","specialties","name","toUpperCase","slice","addNewReview","event","rating","preventDefault","data","user_id","props","user","id","contractor_id","stars","content","target","value","fetch","method","headers","body","JSON","stringify","then","res","json","console","log","setState","CardExampleLinkCard","componentDidMount","render","match","url","contractorObj","find","task","params","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ContractorShowPage from \"../components/ContractorShowPage\"\nimport { Card } from \"semantic-ui-react\";\nimport { isEmpty } from \"lodash\";\nimport {\n  // eslint-disable-next-line\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\n\n\nconst URL = 'http://localhost:3000/contractors'\nconst REVIEWSURL = 'http://localhost:3000/reviews'\n\nexport default class ContractorsContainer extends React.Component {\n\n    state = {\n        allContractors: [],\n        profileSelected:[],\n        newReview: true\n    }\n\n\n    componentDidMount(){\n      fetch(URL)\n      .then(res => res.json())\n      .then(allContractors => {\n      \n        this.setState({allContractors})})\n    }\n\n    extra = (contractor) => {\n      \n      return  this.state.allContractors ?\n       \n       <h3>{`My Specialties Are ${contractor.specialties[0].name[0].toUpperCase() + contractor.specialties[0].name.slice(1)} \n       and ${contractor.specialties[1].name[0].toUpperCase() + contractor.specialties[1].name.slice(1)}`}</h3>\n       \n       : null\n    }\n\n    addNewReview = (event, rating, contractor) => {\n      event.preventDefault()\n      let data = {\n        user_id: this.props.user.id,\n        contractor_id: contractor.id,\n        stars: rating,\n        content: event.target.content.value\n      }\n    \n\n      fetch(REVIEWSURL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data)\n      })\n        .then(res => res.json())\n        .then( res => {\n          console.log(res)\n          // let updateContractor = this.state.allContractors.map( contractor => contractor.id === res.id ? res.id : contractor) \n                                          \n      this.setState({\n        allContractors: res\n      })})\n    }\n\n    CardExampleLinkCard = contractor => (\n      <Card\n        key={contractor.id}\n        image='https://thispersondoesnotexist.com/image'\n        color=\"blue\"\n        href={`/contractors/${contractor.id}`}\n        header={contractor.name}\n        meta={''}\n        description={`Pick me if you want the job done right!`}\n        extra={this.extra(contractor)}\n      />\n    );\n\n    render() {\n  \n      \n        return (\n          <div >\n                  \n            \n             <Route exact path={`${this.props.match.url}/:id`} render={ (props) =>{\n               let contractorObj = this.state.allContractors.find(task => task.id == props.match.params.id)\n               \n              return !isEmpty(contractorObj) ?\n\n                 <ContractorShowPage contractor={contractorObj} addNewReview={this.addNewReview}/> \n                 :\n                 \n                 null\n                \n                }}/>\n          \n            <Route exact path={`${this.props.match.url}`} render={ () =>\n                <div className='contractor-display' >\n                <Card.Group itemsPerRow={4}>\n                  {this.state.allContractors.map(contractor => {\n                  return   this.CardExampleLinkCard(contractor)\n                  \n                  }\n                  )}\n              </Card.Group>\n                </div>}\n            />\n\n\n              </div>\n        );\n      }\n\n\n}"]},"metadata":{},"sourceType":"module"}