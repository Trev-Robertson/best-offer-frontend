{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport 'semantic-ui-css/semantic.min.css';\nimport \"./App.sass\";\nimport Login from \"./components/Login\";\nimport ProfileContainer from \"./containers/ProfileContainer\";\nimport TaskShowPage from \"./components/TaskShowPage\";\nimport ContractorShowPage from \"./components/ContractorShowPage\";\nimport { isEmpty } from \"lodash\";\nimport { // eslint-disable-next-line\nBrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nconst specialties = [\"gardening\", \"plumbing\", \"technology\", \"electrician\", \"carpentry\"];\nconst URL = \"http://localhost:3000/api/v1/login/\";\nconst PROFILE_URL = 'http://localhost:3000/api/v1/profile/';\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: {},\n      loading: true,\n      currentTask: null\n    };\n\n    this.updateUser = user => {\n      this.setState({\n        currentUser: user,\n        loading: false,\n        currentTask: localStorage.getItem(\"task\") ? JSON.parse(localStorage.getItem(\"task\")) : null\n      });\n    };\n\n    this.currentTask = task => {\n      // localStorage.setItem(\"task\", JSON.stringify(task))\n      this.setState({\n        currentTask: task\n      });\n    };\n\n    this.logout = () => {\n      localStorage.clear();\n      this.setState({\n        currentUser: {}\n      });\n    };\n\n    this.componentDidMount = () => {\n      if (localStorage.getItem(\"token\")) {\n        fetch(PROFILE_URL, {\n          headers: {\n            \"Authentication\": \"Bearer \".concat(localStorage.getItem(\"token\"))\n          }\n        }).then(res => res.json()).then(res => {\n          this.updateUser(res);\n        });\n      } else {\n        console.log('not found');\n        this.setState({\n          loading: false\n        });\n      }\n    };\n\n    this.currentUser = event => {\n      event.preventDefault();\n      let data = {\n        name: event.target.name.value,\n        password: event.target.password.value\n      };\n      fetch(URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(res => res.json()).then(data => {\n        if (data.authenticated) {\n          localStorage.setItem(\"token\", data.token);\n          this.setState({\n            currentUser: JSON.parse(data.user)\n          });\n        }\n      });\n    };\n\n    this.acceptBid = bid => {\n      if (!bid.status) {\n        let data = {\n          id: bid.id,\n          status: true,\n          user_id: this.state.currentUser.id\n        };\n        fetch(\"http://localhost:3000/bids/\".concat(bid.id), {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        }).then(res => res.json()).then(currentUser => this.setState({\n          currentUser\n        }));\n      }\n    };\n\n    this.deleteBid = bid => {\n      let data = {\n        id: bid.id,\n        user_id: this.state.currentUser.id\n      };\n      fetch('http://localhost:3000/tasks', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(res => res.json()).then(currentUser => this.setState({\n        currentUser\n      }));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"BEST OFFER OR ELSE\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.logout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Logout\")), !this.state.loading ? React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      render: () => !isEmpty(this.state.currentUser) ? React.createElement(Redirect, {\n        to: \"/profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }) : React.createElement(Login, {\n        login: this.currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), !isEmpty(this.state.currentUser) ? React.createElement(Route, {\n      exact: true,\n      path: \"/task/:id\",\n      render: props => {\n        let taskObj = this.state.currentUser.tasks.find(task => task.id == props.match.params.id);\n        return !isEmpty(this.state.currentUser) ? React.createElement(TaskShowPage, {\n          task: taskObj,\n          toggleTask: this.toggleTask,\n          acceptBid: this.acceptBid,\n          deleteBid: this.deleteBid,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }) : React.createElement(Redirect, {\n          to: \"/login\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: () => !isEmpty(this.state.currentUser) ? React.createElement(ProfileContainer, {\n        user: this.state.currentUser,\n        specialties: specialties,\n        currentTask: this.currentTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }) : React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/\",\n      render: () => React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })) : null);\n  }\n\n} // import React from \"react\";\n// import \"./App.css\";\n// import \"./App.sass\";\n// import Login from \"./components/Login\";\n// import ProfileContainer from \"./containers/ProfileContainer\";\n// import { isEmpty } from \"lodash\";\n// // import ReactDOM from \"react-dom\";\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Switch,\n//   Redirect\n// } from \"react-router-dom\";\n// const specialties = [\n//   \"gardening\",\n//   \"plumbing\",\n//   \"technology\",\n//   \"electrician\",\n//   \"carpentry\"\n// ];\n// const URL = \"http://localhost:3000/api/v1/login/\";\n// const PROFILE_URL = 'http://localhost:3000/api/v1/profile/'\n// export default class App extends React.Component {\n//   state = {\n//     currentUser: {}, \n//     loading: true\n//   };\n//   // componentDidMount(){\n//   //   fetch(URL)\n//   //   .then(res => res.json())\n//   //   .then(allUsers => this.setState({\n//   //     allUsers\n//   //   }))\n//   // }\n//   updateUser = (user) => {\n//     this.setState({\n//       currentUser: user, \n//       loading: false\n//     })\n//   }\n//   logout = () => {\n//     localStorage.clear()\n//     this.setState({\n//       currentUser: {}\n//     })\n//   };\n//   componentDidMount = () => {\n//     if(localStorage.getItem(\"token\")){\n//       console.log('found token')\n//       fetch(PROFILE_URL, {\n//         headers: { \"Authentication\": \n//         `Bearer ${localStorage.getItem(\"token\")}` \n//         }\n//       }\n//       )\n//       .then(res => res.json())\n//       .then(res => {this.updateUser(res)})\n//     }\n//     else{\n//       this.setState({loading: false})\n//     }\n//   }\n//   currentUser = event => {\n//     event.preventDefault();\n//     let data = {\n//       name: event.target.name.value, \n//       password: event.target.password.value\n//     }\n//     fetch(URL, {\n//       method: 'POST', \n//       headers: { \n//         'Content-Type': 'application/json'\n//       }, \n//       body: JSON.stringify(data)\n//     })\n//       .then(res => res.json())\n//       .then(data => {\n//       if(data.authenticated){\n//         localStorage.setItem(\"token\", data.token)\n//         this.setState({\n//           currentUser: JSON.parse(data.user)\n//         })}\n//       });\n//   };\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h1>BEST OFFER OR ELSE</h1>\n//         <p>\n//           <button onClick={this.logout}>Logout</button>\n//         </p>\n//         {!this.state.loading ? <Switch>\n//           <Route\n//             exact\n//             path=\"/login\"\n//             render={() =>\n//               !isEmpty(this.state.currentUser) ? (\n//                 <Redirect to=\"/profile\" />\n//               ) : (\n//                 <Login login={this.currentUser} />\n//               )\n//             }\n//           />\n//           <Route\n//             exact\n//             path=\"/profile\"\n//             render={() =>\n//               !isEmpty(this.state.currentUser) ? (\n//                 <ProfileContainer\n//                   user={this.state.currentUser}\n//                   specialties={specialties}\n//                 />\n//               ) : (\n//                 <Redirect to=\"/login\" />\n//               )\n//             }\n//           />\n//           <Route path=\"/\" render={() => <Redirect to=\"/login\" />} />\n//         </Switch> : null}\n//       </div>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/App.js"],"names":["React","Login","ProfileContainer","TaskShowPage","ContractorShowPage","isEmpty","BrowserRouter","Router","Route","Switch","Redirect","specialties","URL","PROFILE_URL","App","Component","state","currentUser","loading","currentTask","updateUser","user","setState","localStorage","getItem","JSON","parse","task","logout","clear","componentDidMount","fetch","headers","then","res","json","console","log","event","preventDefault","data","name","target","value","password","method","body","stringify","authenticated","setItem","token","acceptBid","bid","status","id","user_id","deleteBid","render","props","taskObj","tasks","find","match","params","toggleTask"],"mappings":"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":["import React from \"react\";\nimport \"./App.css\";\nimport 'semantic-ui-css/semantic.min.css'\nimport \"./App.sass\";\nimport Login from \"./components/Login\";\nimport ProfileContainer from \"./containers/ProfileContainer\";\nimport TaskShowPage from \"./components/TaskShowPage\";\nimport ContractorShowPage from \"./components/ContractorShowPage\"\nimport { isEmpty } from \"lodash\";\n\nimport {\n  // eslint-disable-next-line\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nconst specialties = [\n  \"gardening\",\n  \"plumbing\",\n  \"technology\",\n  \"electrician\",\n  \"carpentry\"\n];\nconst URL = \"http://localhost:3000/api/v1/login/\";\nconst PROFILE_URL = 'http://localhost:3000/api/v1/profile/'\n\nexport default class App extends React.Component {\n  state = {\n    currentUser: {}, \n    loading: true,\n    currentTask: null\n  };\n\n \n\n  updateUser = (user) => {\n    this.setState({\n      currentUser: user, \n      loading: false,\n      currentTask: localStorage.getItem(\"task\") ? JSON.parse(localStorage.getItem(\"task\")) : null\n    })\n  }\n\n  currentTask = (task) =>{\n    // localStorage.setItem(\"task\", JSON.stringify(task))\n    this.setState({\n      currentTask: task\n    })\n  }\n\n  // toggleTask = () =>{\n  //   this.setState({\n  //     currentTask: null\n  //   })\n  // }\n\n  logout = () => {\n    localStorage.clear()\n    this.setState({\n      currentUser: {}\n    })\n  };\n\n  componentDidMount = () => {\n    if(localStorage.getItem(\"token\")){\n      \n      fetch(PROFILE_URL, {\n        headers: { \"Authentication\": \n        `Bearer ${localStorage.getItem(\"token\")}` \n        }\n      }\n      )\n      .then(res => res.json())\n      .then(res => {\n       \n        this.updateUser(res)})\n    }\n    else{\n      console.log('not found')\n      this.setState({loading: false})\n    }\n  }\n\n\n  currentUser = event => {\n    event.preventDefault();\n   \n    let data = {\n      name: event.target.name.value, \n      password: event.target.password.value\n    }\n    fetch(URL, {\n      method: 'POST', \n      headers: { \n        'Content-Type': 'application/json'\n      }, \n      body: JSON.stringify(data)\n    })\n      .then(res => res.json())\n      .then(data => {\n   \n      if(data.authenticated){\n        localStorage.setItem(\"token\", data.token)\n        this.setState({\n          currentUser: JSON.parse(data.user)\n        })}\n      });\n  };\n\n  acceptBid = (bid) => {\n    \n    if(!bid.status){\n    let data = {\n      id: bid.id, \n      status: true,\n      user_id: this.state.currentUser.id\n    }\n    fetch(`http://localhost:3000/bids/${bid.id}`, {\n      method: 'PATCH', \n      headers: { \n        'Content-Type': 'application/json'\n      }, \n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(currentUser => this.setState({currentUser}))\n  }\n  \n  }\n\n  deleteBid = (bid) =>{\n    let data = {\n      id: bid.id,\n      user_id: this.state.currentUser.id\n    }\n    fetch('http://localhost:3000/tasks', {\n      method: 'DELETE', \n      headers: { \n        'Content-Type': 'application/json'\n      }, \n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(currentUser => this.setState({currentUser}))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>BEST OFFER OR ELSE</h1>\n        <p>\n          <button onClick={this.logout}>Logout</button>\n        </p>\n        {!this.state.loading ? <Switch>\n          <Route\n            exact\n            path=\"/login\"\n            render={() =>\n              !isEmpty(this.state.currentUser) ? (\n                <Redirect to=\"/profile\" />\n              ) : (\n                <Login login={this.currentUser} />\n              )\n            }\n          />\n\n            {!isEmpty(this.state.currentUser) ?\n              <Route exact \n                path=\"/task/:id\"\n                render={(props) =>{  \n                 let taskObj =  this.state.currentUser.tasks.find(task => task.id == props.match.params.id) \n                  return   !isEmpty(this.state.currentUser) ?\n                  <TaskShowPage\n                      task={taskObj}\n                      toggleTask={this.toggleTask}\n                      acceptBid={this.acceptBid}\n                      deleteBid={this.deleteBid}\n                  />\n                  :\n                  <Redirect to=\"/login\" />\n                    \n                }}/>\n              :\n              \n              <Redirect to=\"/login\" />\n              \n              \n              }\n\n\n\n\n          <Route\n            exact\n            path=\"/profile\"\n            render={() =>\n              !isEmpty(this.state.currentUser) ? (\n                <ProfileContainer\n                  user={this.state.currentUser}\n                  specialties={specialties}\n                  currentTask={this.currentTask}\n                />\n              ) : \n                <Redirect to=\"/login\" />\n              }/>\n            \n            \n            \n              \n            \n\n          <Route path=\"/\" render={() => <Redirect to=\"/login\" />} />\n        </Switch> : null}\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\n// import React from \"react\";\n// import \"./App.css\";\n// import \"./App.sass\";\n// import Login from \"./components/Login\";\n// import ProfileContainer from \"./containers/ProfileContainer\";\n// import { isEmpty } from \"lodash\";\n// // import ReactDOM from \"react-dom\";\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Switch,\n//   Redirect\n// } from \"react-router-dom\";\n// const specialties = [\n//   \"gardening\",\n//   \"plumbing\",\n//   \"technology\",\n//   \"electrician\",\n//   \"carpentry\"\n// ];\n// const URL = \"http://localhost:3000/api/v1/login/\";\n// const PROFILE_URL = 'http://localhost:3000/api/v1/profile/'\n\n// export default class App extends React.Component {\n//   state = {\n//     currentUser: {}, \n//     loading: true\n//   };\n\n//   // componentDidMount(){\n//   //   fetch(URL)\n//   //   .then(res => res.json())\n//   //   .then(allUsers => this.setState({\n//   //     allUsers\n//   //   }))\n//   // }\n\n//   updateUser = (user) => {\n//     this.setState({\n//       currentUser: user, \n//       loading: false\n//     })\n//   }\n\n\n//   logout = () => {\n//     localStorage.clear()\n//     this.setState({\n//       currentUser: {}\n//     })\n//   };\n\n//   componentDidMount = () => {\n//     if(localStorage.getItem(\"token\")){\n//       console.log('found token')\n//       fetch(PROFILE_URL, {\n//         headers: { \"Authentication\": \n//         `Bearer ${localStorage.getItem(\"token\")}` \n//         }\n//       }\n//       )\n//       .then(res => res.json())\n//       .then(res => {this.updateUser(res)})\n//     }\n//     else{\n//       this.setState({loading: false})\n//     }\n//   }\n\n\n//   currentUser = event => {\n//     event.preventDefault();\n   \n//     let data = {\n//       name: event.target.name.value, \n//       password: event.target.password.value\n//     }\n//     fetch(URL, {\n//       method: 'POST', \n//       headers: { \n//         'Content-Type': 'application/json'\n//       }, \n//       body: JSON.stringify(data)\n//     })\n//       .then(res => res.json())\n//       .then(data => {\n   \n//       if(data.authenticated){\n//         localStorage.setItem(\"token\", data.token)\n//         this.setState({\n//           currentUser: JSON.parse(data.user)\n//         })}\n//       });\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h1>BEST OFFER OR ELSE</h1>\n//         <p>\n//           <button onClick={this.logout}>Logout</button>\n//         </p>\n//         {!this.state.loading ? <Switch>\n//           <Route\n//             exact\n//             path=\"/login\"\n//             render={() =>\n//               !isEmpty(this.state.currentUser) ? (\n//                 <Redirect to=\"/profile\" />\n//               ) : (\n//                 <Login login={this.currentUser} />\n//               )\n//             }\n//           />\n\n//           <Route\n//             exact\n//             path=\"/profile\"\n//             render={() =>\n//               !isEmpty(this.state.currentUser) ? (\n//                 <ProfileContainer\n//                   user={this.state.currentUser}\n//                   specialties={specialties}\n//                 />\n//               ) : (\n//                 <Redirect to=\"/login\" />\n//               )\n//             }\n//           />\n\n//           <Route path=\"/\" render={() => <Redirect to=\"/login\" />} />\n//         </Switch> : null}\n//       </div>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}