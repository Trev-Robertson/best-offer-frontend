{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/containers/ContractorsContainer.js\";\nimport React from \"react\";\nimport ContractorShowPage from \"../components/ContractorShowPage\";\nimport { Card } from \"semantic-ui-react\";\nimport { isEmpty } from \"lodash\";\nimport { // eslint-disable-next-line\nBrowserRouter as Router, Route } from \"react-router-dom\";\nconst URL = \"http://localhost:3000/contractors\";\nconst REVIEWSURL = \"http://localhost:3000/reviews\";\nexport default class ContractorsContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allContractors: [],\n      profileSelected: [],\n      newReview: true\n    };\n\n    this.extra = contractor => {\n      return this.state.allContractors ? React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"My Specialties Are \".concat(contractor.specialties[0].name[0].toUpperCase() + contractor.specialties[0].name.slice(1), \" \\n       and \").concat(contractor.specialties[1].name[0].toUpperCase() + contractor.specialties[1].name.slice(1))) : null;\n    };\n\n    this.addNewReview = (event, rating, contractor) => {\n      event.preventDefault();\n      let data = {\n        user_id: this.props.user.id,\n        contractor_id: contractor.id,\n        stars: rating,\n        content: event.target.content.value\n      };\n      fetch(REVIEWSURL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      }).then(res => res.json()).then(newContractor => {\n        let updateContractor = this.state.allContractors.map(contractor => contractor.id === newContractor.id ? newContractor : contractor);\n        this.setState({\n          allContractors: updateContractor\n        });\n      });\n    };\n\n    this.CardExampleLinkCard = contractor => {\n      return React.createElement(Card, {\n        key: contractor.id,\n        image: contractor.img_url,\n        color: \"blue\",\n        href: \"/contractors/\".concat(contractor.id),\n        header: contractor.name,\n        meta: \"\",\n        description: \"Pick me if you want the job done right!\",\n        extra: this.extra(contractor),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(URL).then(res => res.json()).then(allContractors => {\n      this.setState({\n        allContractors\n      });\n    });\n    console.log(\"mount\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(this.props.match.url, \"/:id\"),\n      render: props => {\n        debugger;\n        let contractorObj = this.state.allContractors.find(task => task.id == props.match.params.id);\n        return !isEmpty(contractorObj) ? React.createElement(ContractorShowPage, {\n          contractor: contractorObj,\n          addNewReview: this.addNewReview,\n          user: this.props.user,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }) : null;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(this.props.match.url),\n      render: () => React.createElement(\"div\", {\n        className: \"contractor-display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Card.Group, {\n        itemsPerRow: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, this.state.allContractors.map(contractor => {\n        return this.CardExampleLinkCard(contractor);\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/containers/ContractorsContainer.js"],"names":["React","ContractorShowPage","Card","isEmpty","BrowserRouter","Router","Route","URL","REVIEWSURL","ContractorsContainer","Component","state","allContractors","profileSelected","newReview","extra","contractor","specialties","name","toUpperCase","slice","addNewReview","event","rating","preventDefault","data","user_id","props","user","id","contractor_id","stars","content","target","value","fetch","method","headers","body","JSON","stringify","then","res","json","newContractor","updateContractor","map","setState","CardExampleLinkCard","img_url","componentDidMount","console","log","render","match","url","contractorObj","find","task","params"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SACE;AACAC,aAAa,IAAIC,MAFnB,EAGEC,KAHF,QAIO,kBAJP;AAMA,MAAMC,GAAG,GAAG,mCAAZ;AACA,MAAMC,UAAU,GAAG,+BAAnB;AAEA,eAAe,MAAMC,oBAAN,SAAmCT,KAAK,CAACU,SAAzC,CAAmD;AAAA;AAAA;AAAA,SAChEC,KADgE,GACxD;AACNC,MAAAA,cAAc,EAAE,EADV;AAENC,MAAAA,eAAe,EAAE,EAFX;AAGNC,MAAAA,SAAS,EAAE;AAHL,KADwD;;AAAA,SAgBhEC,KAhBgE,GAgBxDC,UAAU,IAAI;AACpB,aAAO,KAAKL,KAAL,CAAWC,cAAX,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAA2BI,UAAU,CAACC,WAAX,CAAuB,CAAvB,EAA0BC,IAA1B,CAA+B,CAA/B,EAAkCC,WAAlC,KACzBH,UAAU,CAACC,WAAX,CAAuB,CAAvB,EAA0BC,IAA1B,CAA+BE,KAA/B,CAAqC,CAArC,CADF,2BAEOJ,UAAU,CAACC,WAAX,CAAuB,CAAvB,EAA0BC,IAA1B,CAA+B,CAA/B,EAAkCC,WAAlC,KACJH,UAAU,CAACC,WAAX,CAAuB,CAAvB,EAA0BC,IAA1B,CAA+BE,KAA/B,CAAqC,CAArC,CAHH,EADK,GAKH,IALJ;AAMD,KAvB+D;;AAAA,SAyBhEC,YAzBgE,GAyBjD,CAACC,KAAD,EAAQC,MAAR,EAAgBP,UAAhB,KAA+B;AAE5CM,MAAAA,KAAK,CAACE,cAAN;AACA,UAAIC,IAAI,GAAG;AACTC,QAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,EADhB;AAETC,QAAAA,aAAa,EAAEd,UAAU,CAACa,EAFjB;AAGTE,QAAAA,KAAK,EAAER,MAHE;AAITS,QAAAA,OAAO,EAAEV,KAAK,CAACW,MAAN,CAAaD,OAAb,CAAqBE;AAJrB,OAAX;AAOAC,MAAAA,KAAK,CAAC3B,UAAD,EAAa;AAChB4B,QAAAA,MAAM,EAAE,MADQ;AAEhBC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFO;AAGhBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAef,IAAf;AAHU,OAAb,CAAL,CAKGgB,IALH,CAKQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALf,EAMGF,IANH,CAMQG,aAAa,IAAI;AACrB,YAAIC,gBAAgB,GAAG,KAAKlC,KAAL,CAAWC,cAAX,CAA0BkC,GAA1B,CAA8B9B,UAAU,IAC7DA,UAAU,CAACa,EAAX,KAAkBe,aAAa,CAACf,EAAhC,GAAqCe,aAArC,GAAqD5B,UADhC,CAAvB;AAIA,aAAK+B,QAAL,CAAc;AACZnC,UAAAA,cAAc,EAAEiC;AADJ,SAAd;AAGD,OAdH;AAeD,KAlD+D;;AAAA,SAoDhEG,mBApDgE,GAoD1ChC,UAAU,IAAI;AAClC,aACE,oBAAC,IAAD;AACE,QAAA,GAAG,EAAEA,UAAU,CAACa,EADlB;AAEE,QAAA,KAAK,EAAEb,UAAU,CAACiC,OAFpB;AAGE,QAAA,KAAK,EAAC,MAHR;AAIE,QAAA,IAAI,yBAAkBjC,UAAU,CAACa,EAA7B,CAJN;AAKE,QAAA,MAAM,EAAEb,UAAU,CAACE,IALrB;AAME,QAAA,IAAI,EAAE,EANR;AAOE,QAAA,WAAW,2CAPb;AAQE,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,UAAX,CART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAYD,KAjE+D;AAAA;;AAOhEkC,EAAAA,iBAAiB,GAAG;AAClBf,IAAAA,KAAK,CAAC5B,GAAD,CAAL,CACGkC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQ7B,cAAc,IAAI;AACtB,WAAKmC,QAAL,CAAc;AAAEnC,QAAAA;AAAF,OAAd;AACD,KAJH;AAKAuC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;;AAqDDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,YAAK,KAAK1B,KAAL,CAAW2B,KAAX,CAAiBC,GAAtB,SAFN;AAGE,MAAA,MAAM,EAAE5B,KAAK,IAAI;AACf;AACA,YAAI6B,aAAa,GAAG,KAAK7C,KAAL,CAAWC,cAAX,CAA0B6C,IAA1B,CAClBC,IAAI,IAAIA,IAAI,CAAC7B,EAAL,IAAWF,KAAK,CAAC2B,KAAN,CAAYK,MAAZ,CAAmB9B,EADpB,CAApB;AAIA,eAAO,CAAC1B,OAAO,CAACqD,aAAD,CAAR,GACL,oBAAC,kBAAD;AACE,UAAA,UAAU,EAAEA,aADd;AAEE,UAAA,YAAY,EAAE,KAAKnC,YAFrB;AAGE,UAAA,IAAI,EAAE,KAAKM,KAAL,CAAWC,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADK,GAMH,IANJ;AAOD,OAhBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAoBE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,YAAK,KAAKD,KAAL,CAAW2B,KAAX,CAAiBC,GAAtB,CAFN;AAGE,MAAA,MAAM,EAAE,MACN;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD,CAAM,KAAN;AAAY,QAAA,WAAW,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAK5C,KAAL,CAAWC,cAAX,CAA0BkC,GAA1B,CAA8B9B,UAAU,IAAI;AAC3C,eAAO,KAAKgC,mBAAL,CAAyBhC,UAAzB,CAAP;AACD,OAFA,CADH,CADF,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,CADF;AAoCD;;AAxG+D","sourcesContent":["import React from \"react\";\nimport ContractorShowPage from \"../components/ContractorShowPage\";\nimport { Card } from \"semantic-ui-react\";\nimport { isEmpty } from \"lodash\";\nimport {\n  // eslint-disable-next-line\n  BrowserRouter as Router,\n  Route\n} from \"react-router-dom\";\n\nconst URL = \"http://localhost:3000/contractors\";\nconst REVIEWSURL = \"http://localhost:3000/reviews\";\n\nexport default class ContractorsContainer extends React.Component {\n  state = {\n    allContractors: [],\n    profileSelected: [],\n    newReview: true\n  };\n\n  componentDidMount() {\n    fetch(URL)\n      .then(res => res.json())\n      .then(allContractors => {\n        this.setState({ allContractors });\n      });\n    console.log(\"mount\");\n  }\n\n  extra = contractor => {\n    return this.state.allContractors ? (\n      <h3>{`My Specialties Are ${contractor.specialties[0].name[0].toUpperCase() +\n        contractor.specialties[0].name.slice(1)} \n       and ${contractor.specialties[1].name[0].toUpperCase() +\n         contractor.specialties[1].name.slice(1)}`}</h3>\n    ) : null;\n  };\n\n  addNewReview = (event, rating, contractor) => {\n      \n    event.preventDefault();\n    let data = {\n      user_id: this.props.user.id,\n      contractor_id: contractor.id,\n      stars: rating,\n      content: event.target.content.value\n    };\n\n    fetch(REVIEWSURL, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data)\n    })\n      .then(res => res.json())\n      .then(newContractor => {\n        let updateContractor = this.state.allContractors.map(contractor =>\n          contractor.id === newContractor.id ? newContractor : contractor\n        );\n\n        this.setState({\n          allContractors: updateContractor\n        });\n      });\n  };\n\n  CardExampleLinkCard = contractor => {\n    return (\n      <Card\n        key={contractor.id}\n        image={contractor.img_url}\n        color=\"blue\"\n        href={`/contractors/${contractor.id}`}\n        header={contractor.name}\n        meta={\"\"}\n        description={`Pick me if you want the job done right!`}\n        extra={this.extra(contractor)}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <Route\n          exact\n          path={`${this.props.match.url}/:id`}\n          render={props => {\n            debugger;\n            let contractorObj = this.state.allContractors.find(\n              task => task.id == props.match.params.id\n            );\n\n            return !isEmpty(contractorObj) ? (\n              <ContractorShowPage\n                contractor={contractorObj}\n                addNewReview={this.addNewReview}\n                user={this.props.user}\n              />\n            ) : null;\n          }}\n        />\n\n        <Route\n          exact\n          path={`${this.props.match.url}`}\n          render={() => (\n            <div className=\"contractor-display\">\n              <Card.Group itemsPerRow={6}>\n                {this.state.allContractors.map(contractor => {\n                  return this.CardExampleLinkCard(contractor);\n                })}\n              </Card.Group>\n            </div>\n          )}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}