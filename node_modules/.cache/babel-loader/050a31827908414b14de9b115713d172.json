{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/containers/ContractorsContainer.js\";\nimport React from \"react\";\nimport ContractorShowPage from \"../components/ContractorShowPage\";\nimport { Card } from \"semantic-ui-react\";\nimport { isEmpty } from \"lodash\";\nimport { // eslint-disable-next-line\nBrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nconst URL = 'http://localhost:3000/contractors';\nexport default class ContractorsContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allContractors: [],\n      profileSelected: []\n    };\n\n    this.extra = contractor => {\n      return this.state.allContractors ? React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"My Specialties Are \".concat(contractor.specialties[0].name[0].toUpperCase() + contractor.specialties[0].name.slice(1), \" \\n       and \").concat(contractor.specialties[1].name[0].toUpperCase() + contractor.specialties[1].name.slice(1))) : null;\n    };\n\n    this.CardExampleLinkCard = contractor => React.createElement(Card, {\n      key: contractor.id,\n      image: \"https://thispersondoesnotexist.com/image\",\n      color: \"blue\",\n      href: \"/contractors/\".concat(contractor.id),\n      header: contractor.name,\n      meta: '',\n      description: \"Pick me if you want the job done right!\",\n      extra: this.extra(contractor),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }\n\n  componentDidMount() {\n    fetch(URL).then(res => res.json()).then(allContractors => this.setState({\n      allContractors\n    }));\n  }\n\n  render() {\n    // console.log(this.props)\n    // console.log(this.state.allContractors[0] ? this.state.allContractors[0].specialties[1].name: null)\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Contractor Container\", React.createElement(Route, {\n      path: \"\".concat(this.props.match.url, \"/:id\"),\n      render: props => {\n        let contractorObj = this.state.allContractors.find(task => task.id == props.match.params.id);\n        console.log(contractorObj);\n        return React.createElement(ContractorShowPage, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(this.props.match.url),\n      render: () => React.createElement(\"div\", {\n        className: \"contractor-display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Card.Group, {\n        itemsPerRow: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, this.state.allContractors.map(contractor => {\n        return this.CardExampleLinkCard(contractor);\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/containers/ContractorsContainer.js"],"names":["React","ContractorShowPage","Card","isEmpty","BrowserRouter","Router","Route","Switch","Redirect","URL","ContractorsContainer","Component","state","allContractors","profileSelected","extra","contractor","specialties","name","toUpperCase","slice","CardExampleLinkCard","id","componentDidMount","fetch","then","res","json","setState","render","props","match","url","contractorObj","find","task","params","console","log","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ContractorShowPage from \"../components/ContractorShowPage\"\nimport { Card } from \"semantic-ui-react\";\nimport { isEmpty } from \"lodash\";\nimport {\n  // eslint-disable-next-line\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\n\n\nconst URL = 'http://localhost:3000/contractors'\n\nexport default class ContractorsContainer extends React.Component {\n\n    state = {\n        allContractors: [],\n        profileSelected:[]\n    }\n\n\n    componentDidMount(){\n      fetch(URL)\n      .then(res => res.json())\n      .then(allContractors => this.setState({allContractors}))\n    }\n\n    extra = (contractor) => {\n      \n      return  this.state.allContractors ?\n       \n       <h3>{`My Specialties Are ${contractor.specialties[0].name[0].toUpperCase() + contractor.specialties[0].name.slice(1)} \n       and ${contractor.specialties[1].name[0].toUpperCase() + contractor.specialties[1].name.slice(1)}`}</h3>\n       \n       : null\n    }\n\n    CardExampleLinkCard = contractor => (\n      <Card\n        key={contractor.id}\n        image='https://thispersondoesnotexist.com/image'\n        color=\"blue\"\n        href={`/contractors/${contractor.id}`}\n        header={contractor.name}\n        meta={''}\n        description={`Pick me if you want the job done right!`}\n        extra={this.extra(contractor)}\n      />\n    );\n\n    render() {\n      // console.log(this.props)\n      // console.log(this.state.allContractors[0] ? this.state.allContractors[0].specialties[1].name: null)\n      \n        return (\n          <div >\n                  Contractor Container\n            \n             <Route path={`${this.props.match.url}/:id`} render={ (props) =>{\n               let contractorObj = this.state.allContractors.find(task => task.id == props.match.params.id)\n               console.log(contractorObj)\n               \n                return (\n                 <ContractorShowPage /> \n                \n                )}}/>\n          \n            <Route exact path={`${this.props.match.url}`} render={ () =>\n                <div className='contractor-display' >\n                <Card.Group itemsPerRow={4}>\n                  {this.state.allContractors.map(contractor => {\n                  return   this.CardExampleLinkCard(contractor)\n                  \n                  }\n                  )}\n              </Card.Group>\n                </div>}\n            />\n\n\n              </div>\n        );\n      }\n\n\n}"]},"metadata":{},"sourceType":"module"}