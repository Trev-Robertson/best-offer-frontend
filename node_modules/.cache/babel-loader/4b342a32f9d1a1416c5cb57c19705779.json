{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/containers/ContractorProfileContainer.js\";\nimport React from \"react\";\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react'; // import store from '../redux/store'\n\nimport ContractorProfile from '../components/ContractorProfile';\nimport ContractorTaskShowPage from \"../components/ContractorTaskShowPage\";\nimport { // eslint-disable-next-line\nBrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nconst TASKS = \"http://localhost:3000/tasks/\";\nexport default class ContractorProfileContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      anyBidsSelected: false,\n      sortedBid: [],\n      currentTask: [],\n      showTaskPage: true,\n      loading: true\n    };\n\n    this.updateCurrentTask = () => {\n      this.props.contractor, this.props.task;\n    };\n\n    this.componentDidMount = () => {\n      if (this.props.location.pathname !== '/contractor') {\n        fetch(TASKS + this.props.location.pathname.split('/').pop()).then(res => res.json()).then(task => {\n          if (!task.error) {\n            let sortedBids = this.sortBids(task.bids);\n            this.setState({\n              currentTask: task,\n              sortedBid: sortedBids\n            });\n            task.bids.forEach(bid => {\n              if (bid.status) {\n                this.setState({\n                  anyBidsSelected: true\n                });\n              }\n            });\n          } else {\n            this.setState({\n              showTaskPage: false,\n              loading: false\n            });\n          }\n        });\n      }\n    };\n\n    this.sortBids = bids => {\n      let sorted = bids.sort((a, b) => a.price > b.price ? 1 : -1);\n      return sorted[0];\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.showTaskPage ? React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(this.props.match.url, \"/task/:id\"),\n      render: routerProps => {\n        // let taskObj = this.props.contractor.bids.find(\n        //   bid => bid.task.id == props.match.params.id\n        // )\n        return React.createElement(ContractorTaskShowPage, {\n          id: routerProps.match.params.id,\n          contractor: this.props.contractor,\n          makeABid: this.props.makeABid,\n          contractorDeleteBid: this.props.contractorDeleteBid,\n          routerProps: routerProps,\n          anyBidsSelected: this.state.anyBidsSelected,\n          sortedBid: this.state.sortedBid,\n          currentTask: this.state.currentTask,\n          updateCurrentTask: this.updateCurrentTask,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/opentasks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"\".concat(this.props.match.url),\n      render: routerProps => {\n        return React.createElement(ContractorProfile, {\n          contractor: this.props.contractor,\n          routerProps: routerProps,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/containers/ContractorProfileContainer.js"],"names":["React","Button","Header","Icon","Modal","ContractorProfile","ContractorTaskShowPage","BrowserRouter","Router","Route","Switch","Redirect","TASKS","ContractorProfileContainer","Component","state","anyBidsSelected","sortedBid","currentTask","showTaskPage","loading","updateCurrentTask","props","contractor","task","componentDidMount","location","pathname","fetch","split","pop","then","res","json","error","sortedBids","sortBids","bids","setState","forEach","bid","status","sorted","sort","a","b","price","render","match","url","routerProps","params","id","makeABid","contractorDeleteBid"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react'\n// import store from '../redux/store'\nimport ContractorProfile from '../components/ContractorProfile'\nimport ContractorTaskShowPage from \"../components/ContractorTaskShowPage\";\nimport {\n  // eslint-disable-next-line\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\nconst TASKS = \"http://localhost:3000/tasks/\"\n\n\nexport default class ContractorProfileContainer extends React.Component {\n\n  state = {\n    anyBidsSelected: false,\n    sortedBid: [],\n    currentTask: [],\n    showTaskPage: true,\n    loading: true\n  };\n\n\n  updateCurrentTask = () => {\n    this.props.contractor, this.props.task\n  }\n\n\n  componentDidMount = () => {\n  \n \n    if(this.props.location.pathname !== '/contractor'){\n    fetch(TASKS + this.props.location.pathname.split('/').pop())\n    .then(res => res.json())\n    .then(task => {\n      \n      if(!task.error){\n        let sortedBids = this.sortBids(task.bids)\n        this.setState({\n          currentTask: task, \n          sortedBid: sortedBids,\n          \n      })\n      task.bids.forEach(bid => {\n      if (bid.status) {\n        this.setState({\n          anyBidsSelected: true\n        })\n      }\n    }) }\n    else{\n      \n      this.setState({\n        showTaskPage: false,\n      loading: false})\n    }\n\n  })}\n  };\n\n  sortBids = (bids) => {\n     \n    let sorted = bids.sort((a, b) =>\n      a.price > b.price ? 1 : -1\n    );\n    \n    return sorted[0];\n  };\n\n\n\n  render() {\n    \n    return (\n      <div>\n         \n          <Switch>\n          {this.state.showTaskPage ?\n        <Route\n          exact\n          path={`${this.props.match.url}/task/:id`}\n          render={routerProps => { \n                \n            // let taskObj = this.props.contractor.bids.find(\n            //   bid => bid.task.id == props.match.params.id\n            // )\n            \n            \n            return <ContractorTaskShowPage \n            id={routerProps.match.params.id}\n            contractor={this.props.contractor}\n            makeABid={this.props.makeABid}\n            contractorDeleteBid={this.props.contractorDeleteBid}\n            routerProps={routerProps}\n            anyBidsSelected={this.state.anyBidsSelected}\n            sortedBid={this.state.sortedBid}\n            currentTask={this.state.currentTask}\n            updateCurrentTask={this.updateCurrentTask}\n            />\n          }}\n        /> : \n          <Redirect to=\"/opentasks\" /> }\n\n        <Route\n          \n          path={`${this.props.match.url}`}\n          render={(routerProps) => {\n            \n           return <ContractorProfile contractor={this.props.contractor} routerProps={routerProps}/>\n            }}\n          />\n          </Switch>\n     \n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}