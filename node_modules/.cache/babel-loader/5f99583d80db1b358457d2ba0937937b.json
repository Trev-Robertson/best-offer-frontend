{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/components/ContractorProfile.js\";\nimport React from \"react\"; // import { isEmpty } from \"lodash\";\n// import {Link} from 'react-router-dom'\n\nimport { Card } from \"semantic-ui-react\"; // import store from '../redux/store'\n// import {Link} from 'react-router-dom'\n\nexport default class ContractorProfile extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.sortBids = bids => {\n      let sorted = bids.sort((a, b) => a.price > b.price ? 1 : -1);\n      return sorted[0];\n    };\n\n    this.CardExampleLinkCard = bid => {\n      return React.createElement(Card, {\n        key: Math.floor(Math.random() * 100000000000 + 1),\n        color: \"blue\",\n        href: \"contractor/task/\".concat(bid.task.id),\n        header: bid.task.name,\n        meta: !bid.task.task_done ? \"Current lowest Bid: $\".concat(this.sortBids(bid.task.bids).price) : null,\n        description: !bid.status ? \"Your Bid: $\".concat(bid.price) : \"You Won With A Bid Of: $\".concat(bid.price, \"!\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      });\n    };\n\n    this.textMe = () => {\n      let data = {\n        From: '+13012567282'\n      };\n      fetch('http://localhost:3000/messages/reply', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      }).then(res => res.json()).then(data => {\n        console.log(data);\n      });\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.textMe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Text Me!\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \" Hi, \", this.props.contractor ? this.props.contractor.name : null), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Active Bids:\"), React.createElement(\"div\", {\n      className: \"current-task\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.props.contractor ? React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.props.contractor.bids.map(bid => {\n      return !bid.task.task_done ? this.CardExampleLinkCard(bid) : null;\n    })) : null), React.createElement(\"div\", {\n      className: \"current-task\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Winning Bids:\"), this.props.contractor ? React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.props.contractor.bids.map(bid => {\n      return bid.status ? this.CardExampleLinkCard(bid) : null;\n    })) : null)));\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/components/ContractorProfile.js"],"names":["React","Card","ContractorProfile","Component","state","sortBids","bids","sorted","sort","a","b","price","CardExampleLinkCard","bid","Math","floor","random","task","id","name","task_done","status","textMe","data","From","fetch","method","headers","body","JSON","stringify","then","res","json","console","log","componentDidMount","render","props","contractor","map"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { isEmpty } from \"lodash\";\n// import {Link} from 'react-router-dom'\nimport { Card } from \"semantic-ui-react\";\n// import store from '../redux/store'\n// import {Link} from 'react-router-dom'\n\n\n\nexport default class ContractorProfile extends React.Component {\n  state = {\n \n  };\n\n  componentDidMount() {\n  \n  }\n\n  sortBids = (bids) => {\n\n    let sorted = bids.sort((a, b) =>\n      a.price > b.price ? 1 : -1\n    );\n    \n    return sorted[0];\n  };\n\n  CardExampleLinkCard = bid => {\n  \n    return (\n      <Card\n        key={Math.floor(Math.random() * 100000000000 + 1)}\n        color=\"blue\"\n        href={`contractor/task/${bid.task.id}`}\n        header={bid.task.name}\n        meta={!bid.task.task_done ? `Current lowest Bid: $${this.sortBids(bid.task.bids).price}`: null}\n        description={!bid.status ? `Your Bid: $${bid.price}` : `You Won With A Bid Of: $${bid.price}!`}\n      />\n    );\n  };\n\n \n  textMe = () =>{\n      let data = {\n          From: '+13012567282'\n      }\n    fetch('http://localhost:3000/messages/reply', {\n        method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    })\n      .then(res => res.json())\n      .then(data => { console.log(data)\n    })\n  }\n\n\n\n  render() {\n      \n    return (\n      <div>\n            <button onClick={this.textMe}>Text Me!</button>\n              <h1> Hi, {this.props.contractor ? this.props.contractor.name : null}</h1>\n\n              <h1>Active Bids:</h1>\n            <div className=\"current-task\">\n              {(this.props.contractor) ? (\n                <Card.Group>\n                  {this.props.contractor.bids.map(bid => {\n                    return  !bid.task.task_done ? this.CardExampleLinkCard(bid) : null\n                  })}\n                \n                </Card.Group>\n              ) : null}\n              </div>\n              <div className=\"current-task\">\n                  <div>\n              <h1>Winning Bids:</h1>\n              {(this.props.contractor) ? (\n                <Card.Group>\n                  {this.props.contractor.bids.map(bid => {\n                    return  bid.status ? this.CardExampleLinkCard(bid) : null\n                  })}\n                \n                </Card.Group>\n              ) : null}\n              </div>\n            </div>\n   \n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}