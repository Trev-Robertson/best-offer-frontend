{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/components/profile.js\";\nimport React from \"react\";\nimport NewTaskForm from \"./NewTaskForm\";\nimport { isEmpty } from \"lodash\"; // import {Link} from 'react-router-dom'\n\nimport { Card } from \"semantic-ui-react\"; // import store from '../redux/store'\n// import {Link} from 'react-router-dom'\n\nconst TASKS = \"http://localhost:3000/tasks/\";\nexport default class extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      specialties: [{\n        id: 1,\n        name: \"gardening\"\n      }, {\n        id: 2,\n        name: \"carpentry\"\n      }, {\n        id: 3,\n        name: \"plumbing\"\n      }, {\n        id: 4,\n        name: \"technology\"\n      }, {\n        id: 5,\n        name: \"electrician\"\n      }],\n      currentUser: {}\n    };\n\n    this.sortBids = task => {\n      let sorted = task.bids.sort((a, b) => a.price > b.price ? 1 : -1);\n      console.log();\n      return sorted[0] ? \"Lowest Bid: $\".concat(sorted[0].price, \", by \").concat(sorted[0].contractor.name) : \"  No Bids Yet\";\n    };\n\n    this.CardExampleLinkCard = task => {\n      debugger;\n      return React.createElement(Card, {\n        key: Math.floor(Math.random() * 100000000000 + 1),\n        color: \"blue\",\n        href: \"/task/\".concat(task.id),\n        header: task.name,\n        meta: task.specialty.name[0].toUpperCase() + task.specialty.name.slice(1),\n        description: \"Description: \".concat(task.description, \" \").concat(this.sortBids(task)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n    };\n\n    this.doneTaskNames = () => {\n      let acceptBid = [];\n      this.state.currentUser.tasks.map(task => task.bids.map(bid => bid.status === true ? acceptBid.push(task) : bid));\n      return acceptBid;\n    };\n\n    this.notDoneTaskNames = () => {\n      let acceptBid = [];\n      this.state.currentUser.tasks.map(task => task.bids.map(bid => bid.status !== true ? acceptBid.push(task) : bid));\n      return acceptBid;\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      currentUser: this.props.user\n    });\n  }\n\n  render() {\n    debugger;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \" Hi, \", this.props.user ? this.props.user.name : null), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(NewTaskForm, {\n      specialties: this.state.specialties,\n      addTask: this.props.addTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Active Tasks:\"), React.createElement(\"div\", {\n      className: \"current-task\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), !isEmpty(this.state.currentUser) ? React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.DoneTaskNames().map(task => {\n      return this.CardExampleLinkCard(task);\n    })) : null), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Completed Tasks:\"), React.createElement(\"div\", {\n      className: \"current-task\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, !isEmpty(this.state.currentUser) ? React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.doneTaskNames().map(task => {\n      return this.CardExampleLinkCard(task);\n    })) : null)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironschool/dev/mod5-project/best-offer/best-offer-frontend/src/components/profile.js"],"names":["React","NewTaskForm","isEmpty","Card","TASKS","Component","state","specialties","id","name","currentUser","sortBids","task","sorted","bids","sort","a","b","price","console","log","contractor","CardExampleLinkCard","Math","floor","random","specialty","toUpperCase","slice","description","doneTaskNames","acceptBid","tasks","map","bid","status","push","notDoneTaskNames","componentDidMount","setState","props","user","render","addTask","DoneTaskNames"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport NewTaskForm from \"./NewTaskForm\";\nimport { isEmpty } from \"lodash\";\n// import {Link} from 'react-router-dom'\nimport { Card } from \"semantic-ui-react\";\n// import store from '../redux/store'\n// import {Link} from 'react-router-dom'\n\nconst TASKS = \"http://localhost:3000/tasks/\";\n\nexport default class extends React.Component {\n  state = {\n    specialties: [\n      { id: 1, name: \"gardening\" },\n      { id: 2, name: \"carpentry\" },\n      { id: 3, name: \"plumbing\" },\n      { id: 4, name: \"technology\" },\n      { id: 5, name: \"electrician\" }\n    ],\n    currentUser: {}\n  };\n\n  componentDidMount() {\n    this.setState({\n      currentUser: this.props.user\n    });\n  }\n\n\n\n  sortBids = task => {\n    let sorted = task.bids.sort((a, b) => (a.price > b.price ? 1 : -1));\n\n    console.log();\n    return sorted[0]\n      ? `Lowest Bid: $${sorted[0].price}, by ${sorted[0].contractor.name}`\n      : \"  No Bids Yet\";\n  };\n\n  CardExampleLinkCard = task => {\n    debugger\n   return <Card\n      key={Math.floor(Math.random() * 100000000000 + 1)}\n      \n      color=\"blue\"\n      href={`/task/${task.id}`}\n      header={task.name}\n      meta={task.specialty.name[0].toUpperCase() + task.specialty.name.slice(1)}\n      description={`Description: ${task.description} ${this.sortBids(task)}`}\n    />\n  }\n\n\n  doneTaskNames = () =>{\n      \n    let acceptBid = []\n   \n    this.state.currentUser.tasks.map(task => task.bids.map(bid => bid.status === true ? acceptBid.push(task) : bid))\n\n  return acceptBid\n  }\n\n    notDoneTaskNames = () =>{\n      \n    let acceptBid = []\n   \n    this.state.currentUser.tasks.map(task => task.bids.map(bid => bid.status !== true ? acceptBid.push(task) : bid))\n\n  return acceptBid\n  }\n\n  render() {\n    debugger\n    return (\n      <div >\n<div >\n\n\n        <br />\n<div >  \n        <div>\n          <h1> Hi, {this.props.user ? this.props.user.name : null}</h1>\n          <br />\n          <br />\n         </div>\n        <NewTaskForm\n          specialties={this.state.specialties}\n          addTask={this.props.addTask}\n        />\n</div>\n<div >\n        <h1>Active Tasks:</h1>\n        <div className='current-task'>\n          <br />\n          <br />\n          {!isEmpty(this.state.currentUser)\n            ? \n            <Card.Group >\n            {this.DoneTaskNames().map(task => {\n                \n                 return this.CardExampleLinkCard(task)}\n                \n                \n              )}</Card.Group>\n            : null}\n        </div>\n        <h1>Completed Tasks:</h1>\n        <div className='current-task'>\n        {!isEmpty(this.state.currentUser)\n            ? \n            <Card.Group >\n            {this.doneTaskNames().map(task => {\n                \n                 return this.CardExampleLinkCard(task)}\n                \n                \n              )}</Card.Group>\n            : null}\n        </div>\n</div>\n<div  >\n    \n        \n</div>\n      </div>\n</div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}